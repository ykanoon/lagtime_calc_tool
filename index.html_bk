<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>観測点までの到達時間ツール</title>
  <!-- Leaflet -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <style>
    :root { --panel-w: 360px; }
    html, body { height: 100%; margin: 0; font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; }
    #app { display: grid; grid-template-columns: var(--panel-w) 1fr; height: 100%; }
    #panel { padding: 12px; border-right: 1px solid #ddd; overflow: auto; }
    #panel h2 { margin: 0 0 8px; font-size: 18px; display:flex; gap:8px; align-items:center; flex-wrap: wrap; }
    #panel .hint { color: #555; font-size: 12px; margin: 6px 0 10px; }
    #filters { margin: 8px 0 10px; padding:10px; border:1px solid #eee; border-radius:8px; display:grid; gap:8px; }
    #station-list { display: grid; gap: 6px; max-height: 40vh; overflow: auto; padding: 8px; border: 1px solid #eee; border-radius: 8px; }
    #actions { margin-top: 10px; display: grid; gap: 8px; }
    button { padding: 10px 12px; border: 0; border-radius: 8px; cursor: pointer; font-weight: 600; }
    #showBtn { background: #2563eb; color: #fff; }
    #clearBtn { background: #f1f5f9; }
    #mapWrap { position:relative; }
    #map { width: 100%; height: 100%; }
    .badge { display:inline-block; padding:2px 6px; border-radius:6px; background:#eef2ff; color:#3730a3; font-size:11px; }
    .popup-table { border-collapse: collapse; font-size: 12px; }
    .popup-table td { padding: 2px 6px; border-bottom: 1px solid #eee; }
    .legend { position: absolute; bottom: 12px; left: 12px; background: rgba(255,255,255,0.9); padding: 8px 10px; border-radius: 8px; border:1px solid #ddd; font-size: 12px; }

    /* 右上の結果パネル */
    #resultPanel {
      position: absolute; top: 12px; right: 12px;
      background: rgba(255,255,255,0.96);
      border: 1px solid #ddd; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.08);
      min-width: 280px; max-width: 360px; padding: 10px 12px; font-size: 13px; display: none;
    }
    #resultPanel .title { font-weight: 700; margin-bottom: 6px; display:flex; justify-content:space-between; align-items:center; }
    #resultPanel .close { border:0; background:#f1f5f9; border-radius:8px; padding:4px 8px; cursor:pointer; }
  </style>
</head>
<body>
  <div id="app">
    <aside id="panel">
      <h2>
        観測点リスト
        <span class="badge">2点選択</span>
        <span id="countBadge" class="badge" style="display:none"></span>
      </h2>

      <!-- centerno フィルタ（単一選択） -->
      <div id="filters">
        <label>
          <strong>センター（centerno）</strong><br/>
          <select id="centerSelect" style="margin-top:6px; padding:6px; border-radius:8px; border:1px solid #e5e7eb; width:100%">
            <option value="__all__">(すべて)</option>
          </select>
        </label>
        <span id="filterCount" class="badge" style="display:none"></span>
      </div>

      <div id="station-list">読み込み中…</div>

      <div id="actions">
        <button id="showBtn">表示</button>
        <button id="clearBtn">クリア</button>
      </div>

      <div class="hint">
        地図をクリックすると、その地点→選択観測点までの<strong>水平距離</strong>と、
        音速 <b>340 m/s</b> 仮定の到達時間、<b>ch1 − ch2（符号付き）</b> の時間差を
        <u>画面右上のパネル</u>に表示します。
      </div>
      <div class="hint">タイル: 地理院タイル（淡色） / 距離: Leaflet の球面近似</div>
    </aside>

    <div id="mapWrap">
      <div id="map"></div>

      <!-- 右上固定パネル（結果表示） -->
      <div id="resultPanel">
        <div class="title">
          <span>到達時間（クリック地点）</span>
          <button class="close" id="resultCloseBtn">閉じる</button>
        </div>
        <div id="resultBody">地図をクリックしてください。</div>
      </div>

      <div class="legend">操作: 観測点を2つ選んで「表示」→地図をクリック</div>
    </div>
  </div>

  <script>
    // === 定数 ===
    const SPEED = 340.0; // m/s

    // === 地図初期化 ===
    const map = L.map('map', { zoomControl: true }).setView([35.0, 135.0], 5);
    L.tileLayer('https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png', { attribution: '地理院タイル' }).addTo(map);

    // レイヤー
    const stationLayer = L.layerGroup().addTo(map);
    const linkLayer = L.layerGroup().addTo(map);

    // 状態
    let allStations = [];       // 全観測点
    let filteredStations = [];  // フィルタ後に表示する観測点
    let selected = [];          // 2点まで
    let selectedCenter = "__all__"; // centerno 単一選択

    // 要素
    const centerSelect = document.getElementById('centerSelect');
    const filterCount = document.getElementById('filterCount');
    const resultPanel = document.getElementById('resultPanel');
    const resultBody = document.getElementById('resultBody');
    const resultCloseBtn = document.getElementById('resultCloseBtn');

    resultCloseBtn.onclick = () => { resultPanel.style.display = 'none'; };

    // 初期化
    init();

    async function init() {
      try {
        const res = await fetch('station_all.json');
        if (!res.ok) throw new Error(`station_all.json の取得に失敗: ${res.status} ${res.statusText}`);
        const raw = await res.json();
        if (!Array.isArray(raw)) throw new Error('JSON形式が配列ではありません。');

        // 正規化
        allStations = raw.map((s, idx) => ({
          id: String(s.kansokutencd ?? s.kansokutenno ?? idx),
          code: s.kansokutencd ?? '',
          number: Number(s.kansokutenno),
          name: s.kansokutennm ?? '',
          altName: s.siryoukansokutennm ?? '',
          latDec: Number(s.lat),
          lonDec: Number(s.lon),
          hyoukou: Number(s.hyoukou),
          shozokuno: Number(s.shozokuno),
          centerno: Number(s.centerno)
        })).filter(s => Number.isFinite(s.latDec) && Number.isFinite(s.lonDec));

        if (allStations.length === 0) {
          document.getElementById('station-list').innerHTML = '<span style="color:#b91c1c">取り込み0件。JSONのキー名をご確認ください。</span>';
          return;
        }

        // centerno 値を抽出 → セレクトに反映
        const uniqCenters = [...new Set(allStations.map(s => s.centerno).filter(n => Number.isFinite(n)))].sort((a,b)=>a-b);
        uniqCenters.forEach(v => {
          const opt = document.createElement('option');
          opt.value = String(v);
          opt.textContent = `centerno: ${v}`;
          centerSelect.appendChild(opt);
        });
        centerSelect.onchange = () => {
          selectedCenter = centerSelect.value;
          // フィルタ変更時は選択クリア
          clearSelectionAndLayers();
          applyFilterAndRender();
        };

        // 初期レンダリング
        applyFilterAndRender();

        // 件数バッジ
        const countBadge = document.getElementById('countBadge');
        countBadge.textContent = `${allStations.length}件`;
        countBadge.style.display = 'inline-block';

        // 地図中心
        const latAvg = allStations.reduce((a,b)=>a+b.latDec,0)/allStations.length;
        const lonAvg = allStations.reduce((a,b)=>a+b.lonDec,0)/allStations.length;
        if (Number.isFinite(latAvg) && Number.isFinite(lonAvg)) map.setView([latAvg, lonAvg], 10);

        // 地図クリック
        map.on('click', onMapClick);

        // ボタン
        document.getElementById('showBtn').onclick = onShow;
        document.getElementById('clearBtn').onclick = clearAll;

      } catch (e) {
        document.getElementById('station-list').textContent = '観測点の読み込みに失敗。コンソールを確認してください。';
        console.error(e);
      }
    }

    function applyFilterAndRender() {
      if (selectedCenter === "__all__") {
        filteredStations = allStations.slice();
      } else {
        const cno = Number(selectedCenter);
        filteredStations = allStations.filter(s => s.centerno === cno);
      }
      renderStationList(filteredStations);

      // フィルタ件数バッジ
      filterCount.textContent = `${filteredStations.length}件`;
      filterCount.style.display = 'inline-block';
    }

    // 観測点リスト描画
    function renderStationList(stations) {
      const wrap = document.getElementById('station-list');
      wrap.innerHTML = '';
      if (stations.length === 0) {
        wrap.innerHTML = '<span style="color:#b91c1c">このフィルタでは観測点がありません。</span>';
        return;
      }
      stations.forEach(s => {
        const id = 'st-' + s.id;
        const div = document.createElement('div');
        div.innerHTML = `
          <label style="display:flex;gap:8px;align-items:center">
            <input type="checkbox" id="${id}" value="${s.id}">
            <span>${escapeHtml(s.name)}</span>
            <span style="color:#64748b;font-size:11px">(${escapeHtml(s.code)})</span>
            <span class="badge" title="centerno">${Number.isFinite(s.centerno) ? s.centerno : '-'}</span>
          </label>`;
        const cb = div.querySelector('input');
        cb.addEventListener('change', () => handleCheckChange(cb, s));
        wrap.appendChild(div);
      });
    }

    // 選択
    function handleCheckChange(cb, station) {
      if (cb.checked) {
        if (selected.length >= 2) {
          cb.checked = false;
          alert('選択できる観測点は2つまでです。');
          return;
        }
        selected.push(station);
      } else {
        selected = selected.filter(s => s.id !== station.id);
      }
    }

    // 表示（マーカー）
    function onShow() {
      if (selected.length !== 2) { alert('観測点をちょうど2つ選択してください。'); return; }
      stationLayer.clearLayers();
      linkLayer.clearLayers();

      selected.forEach((s, i) => {
        const mk = L.marker([s.latDec, s.lonDec], { title: s.name })
          .bindPopup(`<b>${escapeHtml(s.name)}</b><br>Lat: ${s.latDec.toFixed(5)}<br>Lon: ${s.lonDec.toFixed(5)}`)
          .addTo(stationLayer);
        if (i === 0) mk.openPopup();
      });

      const group = L.featureGroup(selected.map(s => L.marker([s.latDec, s.lonDec])));
      map.fitBounds(group.getBounds().pad(0.25));
    }

    // クリア（選択/レイヤ/結果）
    function clearAll() {
      document.querySelectorAll('#station-list input[type="checkbox"]').forEach(cb => cb.checked = false);
      clearSelectionAndLayers();
      hideResult();
    }
    function clearSelectionAndLayers() {
      selected = [];
      stationLayer.clearLayers();
      linkLayer.clearLayers();
    }

    // 地図クリック：距離→時間・差（結果は右上パネルに表示）
    function onMapClick(e) {
      if (selected.length !== 2) { return; }
      const p = e.latlng;
      linkLayer.clearLayers();

      const [ch1, ch2] = selected;

      const r1_dist = L.latLng(p.lat, p.lng).distanceTo([ch1.latDec, ch1.lonDec]);
      const r2_dist = L.latLng(p.lat, p.lng).distanceTo([ch2.latDec, ch2.lonDec]);
      const r1_time = r1_dist / SPEED;
      const r2_time = r2_dist / SPEED;

      L.polyline([[p.lat, p.lng], [ch1.latDec, ch1.lonDec]], { weight: 2, dashArray: '4 4' }).addTo(linkLayer);
      L.polyline([[p.lat, p.lng], [ch2.latDec, ch2.lonDec]], { weight: 2, dashArray: '4 4' }).addTo(linkLayer);

      const dt = r1_time - r2_time; // ch1 - ch2（符号付き）

      const html = `
        <div style="margin-bottom:6px;color:#475569">クリック座標: ${p.lat.toFixed(5)}, ${p.lng.toFixed(5)}</div>
        <table class="popup-table" style="width:100%">
          <tr><td>ch1: ${escapeHtml(ch1.name)}</td><td style="text-align:right">${(r1_dist/1000).toFixed(3)} km</td><td style="text-align:right">${r1_time.toFixed(2)} s</td></tr>
          <tr><td>ch2: ${escapeHtml(ch2.name)}</td><td style="text-align:right">${(r2_dist/1000).toFixed(3)} km</td><td style="text-align:right">${r2_time.toFixed(2)} s</td></tr>
          <tr><td style="font-weight:700">ch1 - ch2</td><td colspan="2" style="font-weight:700; text-align:right">${formatSigned(dt)} s</td></tr>
        </table>`;
      showResult(html);
    }

    // 結果パネル表示/非表示
    function showResult(html) {
      resultBody.innerHTML = html;
      resultPanel.style.display = 'block';
    }
    function hideResult() {
      resultBody.innerHTML = '地図をクリックしてください。';
      resultPanel.style.display = 'none';
    }

    // ユーティリティ
    function formatSigned(x, digits = 2) {
      const v = Number(x);
      if (!Number.isFinite(v)) return String(x);
      const s = v.toFixed(digits);
      return (v >= 0 ? '+' : '') + s;
    }
    function escapeHtml(s) {
      return String(s ?? '').replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
    }
  </script>
</body>
</html>

